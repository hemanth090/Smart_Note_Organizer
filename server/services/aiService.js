/**
 * AI Service using Groq API with DeepSeek model
 * Generates AI-enhanced study notes from OCR text
 */

const { Groq } = require('groq-sdk');

class AIService {
  constructor() {
    this.apiKey = process.env.GROQ_API_KEY || 'your_groq_api_key_here';
    this.groq = new Groq({ apiKey: this.apiKey });
    this.model = 'llama3-70b-8192';
    
    if (!this.apiKey || this.apiKey === 'your_groq_api_key_here') {
      console.warn('‚ö†Ô∏è  GROQ_API_KEY not found in environment variables');
    }
  }

  /**
   * Generate study notes from OCR text using Groq with DeepSeek model
   * @param {string} ocrText - Extracted text from OCR
   * @param {Object} options - Generation options
   * @returns {Promise<Object>} - Generated notes and metadata
   */
  async generateStudyNotes(ocrText, options = {}) {
    try {
      if (!this.apiKey || this.apiKey === 'your_groq_api_key_here') {
        throw new Error('Groq API key not configured');
      }

      if (!ocrText || ocrText.trim().length === 0) {
        throw new Error('No text provided for note generation');
      }

      // Limit input text to prevent memory issues
      const maxInputLength = 2000;
      const limitedText = ocrText.length > maxInputLength 
        ? ocrText.substring(0, maxInputLength) + '...' 
        : ocrText;

      console.log('ü§ñ Starting AI note generation with Llama3-70B...');
      console.log(`üìù Input text length: ${limitedText.length} characters`);

      // Prepare the prompt
      const prompt = this.createPrompt(limitedText, options);
      
      // Make API request to Groq with memory-optimized settings
      const chatCompletion = await this.groq.chat.completions.create({
        messages: [
          {
            role: "user",
            content: prompt
          }
        ],
        model: this.model,
        temperature: 0.6,
        max_completion_tokens: 2048, // Reduced from 4096 to save memory
        top_p: 0.95,
        stream: false,
        stop: null
      });

      // Extract generated content
      const generatedContent = chatCompletion.choices[0]?.message?.content;
      
      if (!generatedContent) {
        throw new Error('No content generated by AI service');
      }

      console.log('‚úÖ AI note generation completed');
      console.log(`üìÑ Generated notes length: ${generatedContent.length} characters`);

      // Return minimal metadata to save memory
      return {
        notes: generatedContent,
        metadata: {
          model: this.model,
          inputLength: limitedText.length,
          outputLength: generatedContent.length,
          timestamp: new Date().toISOString()
        }
      };

    } catch (error) {
      console.error('‚ùå AI note generation failed:', error);
      
      if (error.response) {
        // API error response
        const errorMessage = error.response.data?.error?.message || 'API request failed';
        throw new Error(`Groq API error: ${errorMessage}`);
      } else if (error.request) {
        // Network error
        throw new Error('Network error: Unable to reach Groq API');
      } else {
        // Other errors
        throw new Error(`AI service error: ${error.message}`);
      }
    } finally {
      // Force garbage collection if available
      if (global.gc) {
        global.gc();
      }
    }
  }

  /**
   * Create a well-structured prompt for note generation
   * @param {string} ocrText - OCR extracted text
   * @param {Object} options - Prompt options
   * @returns {string} - Formatted prompt
   */
  createPrompt(ocrText, options = {}) {
    const {
      noteStyle = 'comprehensive',
      includeKeyPoints = true,
      includeSummary = true,
      includeQuestions = true,
      subject = null
    } = options;

    let prompt = `Generate study notes in markdown format for the following text: ${ocrText}\n\n`;
    
    prompt += `Please create ${noteStyle} study notes that include:\n\n`;
    
    if (includeSummary) {
      prompt += `1. **Summary**: A concise overview of the main concepts\n`;
    }
    
    if (includeKeyPoints) {
      prompt += `2. **Key Points**: Important facts and concepts organized with bullet points\n`;
    }
    
    prompt += `3. **Main Topics**: Organize content into clear sections with headers\n`;
    prompt += `4. **Important Definitions**: Highlight and explain key terms\n`;
    
    if (includeQuestions) {
      prompt += `5. **Study Questions**: Generate 3-5 review questions based on the content\n`;
    }
    
    if (subject) {
      prompt += `\nContext: This content is related to ${subject}.\n`;
    }
    
    prompt += `\nFormat the response using proper markdown syntax with headers, bullet points, and emphasis. `;
    prompt += `Make the notes clear, well-organized, and suitable for studying. `;
    prompt += `If the text appears to be incomplete or unclear, do your best to create meaningful notes from the available content.`;
    
    return prompt;
  }

  /**
   * Generate a quick summary of the text
   * @param {string} ocrText - OCR extracted text
   * @returns {Promise<Object>} - Generated summary
   */
  async generateQuickSummary(ocrText) {
    try {
      const prompt = `Provide a brief summary (2-3 sentences) of the following text: ${ocrText}`;
      
      const chatCompletion = await this.groq.chat.completions.create({
        messages: [
          {
            role: "user",
            content: prompt
          }
        ],
        model: this.model,
        temperature: 0.5,
        max_completion_tokens: 200,
        top_p: 0.95,
        stream: false,
        stop: null
      });

      const summary = chatCompletion.choices[0]?.message?.content;
      
      return {
        summary: summary || 'Unable to generate summary',
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Summary generation failed:', error);
      throw new Error(`Summary generation failed: ${error.message}`);
    }
  }

  /**
   * Check if API key is configured
   * @returns {boolean} - True if API key is available
   */
  isConfigured() {
    return !!(this.apiKey && this.apiKey !== 'your_groq_api_key_here');
  }
}

// Create singleton instance
const aiService = new AIService();

module.exports = aiService;
